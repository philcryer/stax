#!/bin/bash

set -e

##################################################################
#   stax - for aws ec2 - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#               "this should work(tm)!"
#
#   TODO
#   * better formating with more (specific) details in jq output
#   * dance like no ones watching
#   * learn conversational german
##################################################################

STAX_PRE_NAME="stax"
COREOS_CHANNEL="alpha"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )

stax-colors(){
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  purple=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  reset=$(tput sgr0)
}

stax-usage(){
echo "Usage: stax command"

echo; echo "Commands:"
echo "  create            Create new stax"
echo "  create-vpc        Create new VPC stax"
echo "  describe | desc   Describe created stax"
echo "  getip             Get the public, or elastic IP of created stax"
echo "  destroy           Destroy existing stax"
echo "  dryrun            Don't do anything, just show what would be done"

echo; echo "For more help, check the docs; https://github.com/philcryer/stax"
exit 1
}

[ $# -gt 0 ] || stax-usage

stax-logo(){
NUMS=`wc -l < config/stax-slogans`
  echo "${green}     _             "
  echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) config/stax-slogans | tail -1`${green}"
  echo " ___| |_ __ ___  __"
  echo '/ __| __/ _` \ \/ /'
  echo '\__ \ || (_| |>  < '
  echo "|___/\__\__,_/_/\_\ ${reset}"
  echo
}

stax-existing(){
  if [ ! -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
}

stax-preflight(){
  which jq > /dev/null 2>&1 || { echo "jq (commandline JSON processor) is not installed. Aborting."; exit 1; }
  which aws > /dev/null 2>&1 || { echo "awscli is not installed. Aborting."; exit 1; }
  if [ ! -f ${HOME}/.aws/config ]; then
     echo "awscli not configured, run 'aws configure'. Aborting."; exit 1
  fi
  if [ ! -f config.json ] && [ ! -f config-vpc.json ]; then
     echo "config.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  if [ ! -d ${HOME}/.stax ]; then
     mkdir -p ${HOME}/.stax
     echo "Created ${HOME}/.stax directory."
  fi
}

stax-summary(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} stax summary"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} stax name: $STAX_NAME"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} discovery url: $DISCOVERY_URL"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} allow ssh from: $SSH_FROM"
}

stax-create(){
  stax-generate
  STAX_NAME="$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  echo $STAX_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} creating $CLUSTER_SIZE nodes - $STAX_NAME"
  aws --color on cloudformation create-stack \
    --stack-name $STAX_NAME \
    --template-body file://$SCRIPT_PATH/templates/cloudformation-template-$COREOS_CHANNEL.json \
    --parameters "$(<config.json.tmp)"
}

stax-create-vpc(){
  stax-generate-vpc
  STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  echo $STAX_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} creating $CLUSTER_SIZE nodes - $STAX_NAME"
  aws --color on cloudformation create-stack \
    --stack-name $STAX_NAME \
    --template-body file://$SCRIPT_PATH/templates/cloudformation-template-vpc-var.json \
    --parameters "$(<config-vpc.json.tmp)"
}

stax-describe(){
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null 2>&1 || { echo "${yellow}[ ${cyan}----${yellow} ]${reset} no stax defined"; rm $HOME/.stax/stax-name; exit 1; }
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} describe $STAX_NAME"
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation describe-stacks --stack-name $STAX_NAME --output table
}

stax-list(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} list all existing stax"
  aws cloudformation list-stacks |jq '.StackSummaries[].StackName'
  exit 0
}

stax-getip(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} looking up public ip"
  aws ec2 describe-instances | jq '.Reservations[].Instances[].PublicIpAddress'
  exit 0
}

stax-destroy(){
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation delete-stack --stack-name $STAX_NAME 
  rm $HOME/.stax/$STAX_NAME.json > /dev/null
  rm $HOME/.stax/stax-name > /dev/null
}

stax-generate(){
  cp config.json config.json.tmp
  SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed "s/SSH_FROM/${SSH_FROM}/g" config.json.tmp
  DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed "s|DISCOVERY_URL|${DISCOVERY_URL}|g" config.json.tmp
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

stax-generate-vpc(){
  if [ ! -f config-vpc.json ]; then
     echo "config-vpc.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  cp config-vpc.json config-vpc.json.tmp
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

clear
stax-colors
stax-logo
stax-preflight

if [ -f $HOME/.stax/stax-name ]; then
  STAX_NAME=`cat $HOME/.stax/stax-name`
fi

if [[ "$1" == "dryrun" ]]; then
  stax-existing
  stax-generate
  stax-summary
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} dryrun only, exiting"
  exit 0
fi

if [[ "$1" == "create" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create
    stax-describe
    aws cloudformation describe-stacks --stack-name $STAX_NAME > ~/.stax/$STAX_NAME.json
    rm config.json.tmp
    exit 0
  fi
fi

if [[ "$1" == "create-vpc" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create-vpc
    stax-describe
    aws cloudformation describe-stacks --stack-name $STAX_NAME > ~/.stax/$STAX_NAME.json
    rm config-vpc.json.tmp
    exit 0
  fi
fi

if [[ "$1" == "describe" || "desc" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    stax-describe
  else
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
fi

if [[ "$1" == "getip" ]]; then
  stax-existing
  stax-getip
fi

if [[ "$1" == "destroy" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    read -p "${yellow}[ ${cyan}????${yellow} ]${reset} ok to destroy $STAX_NAME [y/n]? " answer
    if [[ $answer = y ]] ; then
        stax-destroy
        echo "${yellow}[ ${cyan}----${yellow} ]${reset} $STAX_NAME will be destroyd"
    fi
  else
    echo "${yellow}[ ${cyan}----${yellow} ]${reset} could not destroy $STAX_NAME, check name"
    exit 1
  fi
fi

exit 0
