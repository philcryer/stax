#!/bin/bash

set -e

##################################################################
#   stax - for aws ec2 - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#               "this should work(tm)!"
##################################################################

STAX_PRE_NAME="stax"
COREOS_CHANNEL="alpha"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )
SYSTEM=`uname`
aws="aws --color on"

stax-colors(){
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  purple=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  reset=$(tput sgr0)
}

stax-usage(){
echo "Usage: stax <command>"

echo; echo "Commands:"
echo "  create            Create new stax"
echo "  create-vpc        Create new VPC stax"
echo "  desc              Describe created stax"
echo "  desc-auto         Describe existing autoscaling policies for current stax"
#echo "  getip                 Get the public, or elastic IP of created stax"
echo "  list              List all currently built and running stax"
echo "  destroy           Destroy existing stax"
#echo "  test <template> Validate a template that is called out"
#echo "  dryrun            Don't do anything, just show what would be done"

echo; echo "For more help, check the docs; https://github.com/philcryer/stax"
exit 1
}

[ $# -gt 0 ] || stax-usage

stax-logo(){
NUMS=`wc -l < config/stax-slogans`
  echo "${green}     _             "
  echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) config/stax-slogans | tail -1`${green}"
  echo " ___| |_ __ ___  __"
  echo '/ __| __/ _` \ \/ /'
  echo '\__ \ || (_| |>  < '
  echo "|___/\__\__,_/_/\_\ ${reset}"
  echo
}

stax-existing(){
  if [ ! -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
}

#stax-test(){
#  if [ ! -z "${2}" ]; then
#    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} template not defined"
#    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} stax validate <template>"
#    exit 1
#  else
#    echo "${yellow}[ ${blue}info${yellow} ]${reset} validating template ${2}"
#    echo ${2}
#    template="file://$2"
#    echo "$template"
#    stax-validate "$template"
#   # aws cloudformation validate-template --template-url ${2}
#    echo "aws cloudformation validate-template --template-body file://\$\{2\}"
#    #aws cloudformation validate-template --template-body file://${2}
#    exit 1
#  fi
#}

stax-preflight(){
  which jq > /dev/null 2>&1 || { echo "jq (commandline JSON processor) is not installed. Aborting."; exit 1; }
  which aws > /dev/null 2>&1 || { echo "awscli is not installed. Aborting."; exit 1; }
  if [ ! -f ${HOME}/.aws/config ]; then
     echo "awscli not configured, run 'aws configure'. Aborting."; exit 1
  fi
  if [ ! -d ${HOME}/.stax ]; then
      mkdir -p ${HOME}/.stax
      echo "creating directory ${HOME}/.stax"
  fi
  if [ ! -f config.json ] && [ ! -f config-vpc.json ]; then
     echo "config.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  if [ ! -d ${HOME}/.stax ]; then
     mkdir -p ${HOME}/.stax
     echo "Created ${HOME}/.stax directory."
  fi
}

stax-summary(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} stax summary"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} stax name: $STAX_NAME"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} discovery url: $DISCOVERY_URL"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} allow ssh from: $SSH_FROM"
}

stax-validate(){
  template="$1"
  echo "$template"
  if ! $aws cloudformation validate-template --template-url "$template" > /dev/null; then
    echo "$pkg: cloudformation template failed to validate. Aborting"
    exit 2
  fi
}

stax-create(){
  stax-generate
  STAX_NAME="$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  echo $STAX_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} creating $CLUSTER_SIZE nodes - $STAX_NAME"
  $aws cloudformation create-stack \
    --stack-name $STAX_NAME \
    --template-body file://$SCRIPT_PATH/templates/cloudformation-template-$COREOS_CHANNEL.json \
    --parameters "$(</tmp/config.json.tmp)" \
    --capabilities CAPABILITY_IAM
}

stax-create-vpc(){
  stax-generate-vpc
  STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  # upload template to s3 to have bigger size limits
  bucket="mon-$STAX_NAME"
  template="$bucket/$STAX_NAME.json"
  template_url="https://s3.amazonaws.com/$template"
  $aws s3 mb "s3://$bucket"
  $aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc.json" "s3://$template"
  stax-validate "$template_url"
  echo $STAX_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} creating $CLUSTER_SIZE nodes - $STAX_NAME"
  $aws cloudformation create-stack \
    --stack-name $STAX_NAME \
    --template-url "$template_url" \
    --parameters "$(</tmp/config-vpc.json.tmp)" \
    --capabilities CAPABILITY_IAM
  $aws s3 rb --force "s3://$bucket"
}

stax-describe(){
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null 2>&1 || { echo "${yellow}[ ${cyan}----${yellow} ]${reset} no stax defined"; rm $HOME/.stax/stax-name; exit 1; }
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} describe $STAX_NAME"
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation describe-stacks --stack-name $STAX_NAME 
  aws cloudformation describe-stacks --stack-name $STAX_NAME > ~/.stax/$STAX_NAME.json
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} saved to ~/.stax/$STAX_NAME.json"
}

stax-list(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} list all running stax"
  aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE
  exit 0
}

stax-descauto(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} current auto scaling policies" 
  #AUTO_SCALING_GROUP=`aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat ~/.stax/stax-name` | cut -d"/" -f2 | cut -d"\"" -f1`
  aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat ~/.stax/stax-name` | cut -d"/" -f2 | cut -d"\"" -f1 > /tmp/asg
  #aws autoscaling describe-policies --auto-scaling-group-name $AUTO_SCALING_GROUP
  aws autoscaling describe-policies --auto-scaling-group-name `cat /tmp/asg`
  rm /tmp/asg
  exit 0
}

#stax-getip(){
#  echo "${yellow}[ ${cyan}----${yellow} ]${reset} looking up public ip"
#  aws ec2 describe-instances | jq '.Reservations[].Instances[].PublicIpAddress'
#  exit 0
#}

stax-destroy(){
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation delete-stack --stack-name $STAX_NAME 
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} removing ~/.stax/stax-name"
  rm $HOME/.stax/$STAX_NAME.json > /dev/null
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} removing ~/.stax/$STAX_NAME.json"
  rm $HOME/.stax/stax-name > /dev/null
}

stax-generate(){
<<<<<<< HEAD
  cp config.json config.json.tmp
  SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed "s/SSH_FROM/${SSH_FROM}/g" config.json.tmp
  DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed "s|DISCOVERY_URL|${DISCOVERY_URL}|g" config.json.tmp
=======
  if [ ! -f config.json ]; then
     echo "config.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  cp config.json /tmp/config.json.tmp
  if [ ${SYSTEM} == 'Darwin' ]; then
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i '' "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i '' "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  else
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  fi
>>>>>>> 4ba9634872e07b5ceb316f0dcf8699148d69ccf5
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

stax-generate-vpc(){
  if [ ! -f config-vpc.json ]; then
     echo "config-vpc.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  cp config-vpc.json /tmp/config-vpc.json.tmp
  if [ ${SYSTEM} == 'Darwin' ]; then
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i '' "s/SSH_FROM/${SSH_FROM}/g" /tmp/config-vpc.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i '' "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config-vpc.json.tmp
  else
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i "s/SSH_FROM/${SSH_FROM}/g" /tmp/config-vpc.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config-vpc.json.tmp
  fi
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

clear
stax-colors
stax-logo

#if [[ "$1" == "test" ]]; then
#  stax-test
#fi

stax-preflight

if [ -f $HOME/.stax/stax-name ]; then
  STAX_NAME=`cat $HOME/.stax/stax-name`
fi

if [[ "$1" == "list" ]]; then
  stax-list
fi

if [[ "$1" == "desc-auto" ]]; then
  stax-existing
  stax-descauto
fi

if [[ "$1" == "dryrun" ]]; then
  stax-existing
  stax-generate
  stax-summary
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} dryrun only, exiting"
  exit 0
fi

if [[ "$1" == "create" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create
    stax-describe
    rm /tmp/config.json.tmp
    exit 0
  fi
fi

if [[ "$1" == "create-vpc" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create-vpc
    stax-describe
    rm /tmp/config-vpc.json.tmp
    exit 0
  fi
fi

if [[ "$1" == "describe" || "desc" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    stax-describe
  else
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
fi

#if [[ "$1" == "getip" ]]; then
#  stax-existing
#  stax-getip
#fi

if [[ "$1" == "destroy" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    read -p "${yellow}[ ${cyan}????${yellow} ]${reset} ok to destroy $STAX_NAME [y/n]? " answer
    if [[ $answer = y ]] ; then
        stax-destroy
        echo "${yellow}[ ${cyan}----${yellow} ]${reset} $STAX_NAME will be destroyed"
    fi
  else
    echo "${yellow}[ ${cyan}----${yellow} ]${reset} could not destroy $STAX_NAME, check name"
    exit 1
  fi
fi

exit 0
