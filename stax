#!/bin/bash

set -e

#####################################################################
#   stax - builds a VPC in AWS - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#   this should work(tm)!                                  2015/01
#####################################################################

STAX_PRE_NAME="stax"
COREOS_CHANNEL="alpha"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )
SYSTEM=`uname`
aws="aws --color on"

stax-colors(){
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  purple=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  reset=$(tput sgr0)
}

stax-usage(){
echo "Usage: stax <command>"

echo; echo "Commands:"
echo "  list          List all completely built and running stax"
echo "  create        Create a new VPC stax in AWS"
echo "  describe      Describe the created VPC stax"
echo "  connect       Connect to the jumpbox in the VPC stax over SSH"
echo "  destroy       Destroy the existing VPC stax"

echo; echo "For more help, check the docs; https://github.com/philcryer/stax"
exit 1
}

[ $# -gt 0 ] || stax-usage

stax-logo(){
NUMS=`wc -l < config/stax-slogans`
  echo "${green}     _             "
  echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) config/stax-slogans | tail -1`${green}"
  echo " ___| |_ __ ___  __"
  echo '/ __| __/ _` \ \/ /'
  echo '\__ \ || (_| |>  < '
  echo "|___/\__\__,_/_/\_\ ${reset}"
  echo
}

stax-existing(){
  if [ ! -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  else
    STAX_EXIST=`cat ~/.stax/stax-name`
  fi
}

stax-preflight(){
  which aws > /dev/null 2>&1 || { echo "awscli is not installed. Aborting."; exit 1; }
  if [ ! -f ${HOME}/.aws/config ]; then
     echo "awscli not configured, run 'aws configure'. Aborting."; exit 1
  fi
  if [ ! -d ${HOME}/.stax ]; then
      mkdir -p ${HOME}/.stax
      echo "creating directory ${HOME}/.stax"
  fi
  if [ ! -f config.json ]; then
     echo "config.json not configured, copy example to this directory, configure it and run again."
     echo " cp config/config.json.example config.json"
     echo "Aborting."; exit 1
  fi
  if [ ! -d ${HOME}/.stax ]; then
     mkdir -p ${HOME}/.stax
     echo "Created ${HOME}/.stax directory."
  fi
}

stax-validate(){
  template="$1"
  echo "$template"
  if ! $aws cloudformation validate-template --template-url "$template" > /dev/null; then
    echo "$pkg: cloudformation template failed to validate. Aborting"
    exit 2
  fi
}

stax-create(){
  stax-generate
  STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   create stax"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     creating bucket: "
  # upload template to s3 to have bigger size limits
  bucket="mon-$STAX_NAME"
  template="$bucket/$STAX_NAME.json"
  template_url="https://s3.amazonaws.com/$template"
  $aws s3 mb "s3://$bucket" > /dev/null
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     uploading template: "
  $aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc.json" "s3://$template" > /dev/null
  #$aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc-consul.json" "s3://$template" > /dev/null
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     validating template: "
  stax-validate "$template_url" > /dev/null
  echo "done"
  echo $STAX_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}     creating vpc in aws"
  $aws cloudformation create-stack \
    --stack-name $STAX_NAME \
    --template-url "$template_url" \
    --parameters "$(</tmp/config.json.tmp)" \
    --capabilities CAPABILITY_IAM
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     cleaning s3 bucket: "
  $aws s3 rb --force "s3://$bucket" > /dev/null
  echo "done"
}

stax-describe(){
  echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   describe stax"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
  aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null 2>&1 || { echo; echo "${yellow}[ ${cyan}----${yellow} ]${reset} no stax defined"; rm $HOME/.stax/stax-name; exit 1; }
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     saving output"
  aws cloudformation describe-stacks --stack-name $STAX_NAME > ~/.stax/$STAX_NAME.json; echo ": done"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}     see ~/.stax/$STAX_NAME.json for details"
  #echo "${yellow}[ ${cyan}----${yellow} ]${reset}     output summary (see ~/.stax/$STAX_NAME.json for full details)"
  #echo "["
  #cat ~/.stax/vpc* | grep "StackName" 
  #cat ~/.stax/vpc* | grep "StackId\"\:"
  #cat ~/.stax/vpc* | grep "StackStatus\"\:"
  #cat ~/.stax/vpc* | grep "Description\"\:\ \"Autoscaling"
  #echo "]"
}

stax-list(){
  #echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   list running stax"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
  aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE > /tmp/cls
  echo "done"
  cat /tmp/cls; rm /tmp/cls
  exit 0
}

stax-descauto(){
  echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   define autoscaling policies"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
  aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat ~/.stax/stax-name` | cut -d"/" -f2 | cut -d"\"" -f1 > /tmp/asg; 
  echo "done"
  aws autoscaling describe-policies --auto-scaling-group-name `cat /tmp/asg`
  rm /tmp/asg
  exit 0
}

stax-getip(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get public IP (EIP)"
  if [ `cat ~/.stax/$STAX_NAME.json | grep CREATE_COMPLETE | wc -l` -eq "0" ]; then
    echo "${yellow}[ ${cyan}NULL${yellow} ]${reset}     IP is undefined, this means the build is not complete, try again in a few minutes"
    exit 1
  fi
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
  STAX_PUB_IP=`cat ~/.stax/$STAX_NAME.json | grep -B2 -A2 'JumpEIP' | grep -o '^\|[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*'`
  echo "done"
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}     public IP (EIP): $STAX_PUB_IP"
}

stax-pushkey(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   push key to jumpbox"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing key to $STAX_PUB_IP: "
  STAX_KEY=`cat ~/.stax/$STAX_NAME.json | grep -B1 -A1 'KeyName'|grep "ParameterValue" | cut -d"\"" -f4`
  scp -q -i ~/.ssh/$STAX_KEY.pem ~/.ssh/$STAX_KEY.pem ec2-user@$STAX_PUB_IP:.ssh > /dev/null
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     setting permissions on key: "
  ssh -i ~/.ssh/$STAX_KEY.pem ec2-user@$STAX_PUB_IP 'chmod 0600 .ssh/*.pem' > /dev/null
  echo "done"
}

stax-motd(){
  echo "     _             " > /tmp/motd
  echo "    | |" >> /tmp/motd
  echo " ___| |_ __ ___  __" >> /tmp/motd
  echo '/ __| __/ _` \ \/ /' >> /tmp/motd
  echo "\__ \ || (_| |>  <" >> /tmp/motd
  echo "|___/\__\__,_/_/\_\\" >> /tmp/motd
  echo >> /tmp/motd
  echo "IP        `echo $STAX_PUB_IP`" >> /tmp/motd
  echo "Name      `cat ~/.stax/stax-name`" >> /tmp/motd
  #echo "Built     `date +'%Y%m%d-%H%M'`" >> /tmp/motd
  echo "Built     `date`" >> /tmp/motd
}

stax-pushmotd(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   setup motd and bashrc on jumpbox"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing motd to $STAX_PUB_IP: "
  if [ ! -f '/tmp/motd' ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset}     motd file not found, exiting";
    exit 1
  fi
  scp -q -i ~/.ssh/$STAX_KEY.pem /tmp/motd ec2-user@$STAX_PUB_IP:~ > /dev/null
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing bashrc to $STAX_PUB_IP: "
  scp -q -i ~/.ssh/$STAX_KEY.pem config/bashrc ec2-user@$STAX_PUB_IP:~/.bashrc > /dev/null
  echo "done"
  rm /tmp/motd
}

stax-getdockerips(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get docker IP(s)"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
  aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | grep -A11 -B11 docker-$STAX_NAME | grep PRIVATEIPADDRESSES  | grep -o '^\|[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' > /tmp/dockerlists
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building dockerlist: "
  mv /tmp/dockerlists /tmp/docker_hosts
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building docker connect: "
  cp templates/dockconnect /tmp/dockconnect
  if [ ${SYSTEM} == 'Darwin' ]; then
    sed -i '' "s|STAX_KEY|${STAX_KEY}|g" /tmp/dockconnect
  else
    sed -i "s|STAX_KEY|${STAX_KEY}|g" /tmp/dockconnect
  fi
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     putting docker files on jumpbox: "
  scp -q -i ~/.ssh/$STAX_KEY.pem /tmp/docker_hosts ec2-user@$STAX_PUB_IP:~ > /dev/null
  scp -q -i ~/.ssh/$STAX_KEY.pem /tmp/dockconnect ec2-user@$STAX_PUB_IP:~ > /dev/null
  ssh -i ~/.ssh/$STAX_KEY.pem ec2-user@$STAX_PUB_IP 'chmod 0755 dockconnect' > /dev/null
  echo "done"
  echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     cleaning files: "
  rm /tmp/docker_hosts; rm /tmp/dockconnect
  echo "done"
}

stax-connect(){
  ssh -i ~/.ssh/$STAX_KEY.pem ec2-user@$STAX_PUB_IP 
}

stax-destroy(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   destroy stax"
    read -p "${yellow}[ ${cyan}????${yellow} ]${reset}     ok to destroy $STAX_NAME [y/n]? " answer
    if [[ $answer = y ]] ; then
      echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting: "
      aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation delete-stack --stack-name $STAX_NAME 
      echo "done"
      echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     cleaning files: "
      rm ~/.stax/$STAX_NAME.json > /dev/null
      rm ~/.stax/stax-name > /dev/null
      echo "done"
      exit 0
    else
      echo "${yellow}[ ${cyan}----${yellow} ]${reset}     could not destroy $STAX_NAME, check name"
      exit 1
    fi
}

stax-generate(){
<<<<<<< HEAD
  cp config.json config.json.tmp
  SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed "s/SSH_FROM/${SSH_FROM}/g" config.json.tmp
  DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed "s|DISCOVERY_URL|${DISCOVERY_URL}|g" config.json.tmp
=======
  if [ ! -f config.json ]; then
     echo "config.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  cp config.json /tmp/config.json.tmp
  if [ ${SYSTEM} == 'Darwin' ]; then
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i '' "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i '' "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  else
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  fi
>>>>>>> 4ba9634872e07b5ceb316f0dcf8699148d69ccf5
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

stax-generate(){
  if [ ! -f config.json ]; then
     echo "config.json not configured, copy example and configure'. Aborting."; exit 1
  fi
  cp config.json /tmp/config.json.tmp
  if [ ${SYSTEM} == 'Darwin' ]; then
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i '' "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i '' "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  else
    SSH_FROM="$(curl -s http://icanhazip.com)\/32"; sed -i "s/SSH_FROM/${SSH_FROM}/g" /tmp/config.json.tmp
    DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"; sed -i "s|DISCOVERY_URL|${DISCOVERY_URL}|g" /tmp/config.json.tmp
  fi
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

clear
stax-colors
stax-logo
stax-preflight

if [ -f $HOME/.stax/stax-name ]; then
  STAX_NAME=`cat $HOME/.stax/stax-name`
fi

if [[ "$1" == "list" ]]; then
  stax-list
fi

if [[ "$1" == "desc-auto" ]]; then
  stax-existing
  stax-descauto
fi

if [[ "$1" == "create" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create
    stax-describe
    rm /tmp/config.json.tmp
    exit 0
  fi
fi

if [[ "$1" == "describe" || "desc" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    stax-describe
  else
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
fi

if [[ "$1" == "getip" ]]; then
  stax-existing
  stax-getip
  exit 0
fi

if [[ "$1" == "test" ]]; then
  stax-getdockerips
  exit 0
fi

if [[ "$1" == "pushkey" ]]; then
  stax-existing
  stax-getip
  stax-pushkey
  exit 0
fi

if [[ "$1" == "connect" ]]; then
  stax-existing
  stax-getip
  stax-pushkey
  stax-motd
  stax-pushmotd
  stax-getdockerips
  stax-connect
  exit 0
fi

if [[ "$1" == "destroy" ]]; then
  stax-existing
  stax-destroy
fi

exit 0
